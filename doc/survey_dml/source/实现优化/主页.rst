.. .............................................................................
..
.. Filename       : 主页.rst
.. Author         : Huang Leilei
.. Created        : 2020-05-23
.. Description    : 主页
..
.. .............................................................................

=========
实现优化
=========

-------------
转化代价函数
-------------

............................
转化前的代价函数及其资源占用
............................

    根据《背景说明》中的内容，（在只采样一次的情况下的）代价函数为
    :math:`C = abs(tr(A (A^H A)^{-1} A^H X X^H))`。

    此时，我们不妨假设天线的数量为M，待测角度的数量为N，那么，

*   当所有的变量都采用实时运算的方式获取时，
    对一组 :math:`X` 遍历一次上述代价函数所需的运算过程为：

    .. table::
        :align: left
        :widths: auto

        ============================== =========================================
        变量                            运算过程
        ============================== =========================================
        :math:`T_{0} = A^H A`           (1+N-1)×(N-1)/2次2×M矩阵与M×2矩阵的乘法
        :math:`T_{1} = {T_{0}}^{-1}`    (1+N-1)×(N-1)/2次2×2矩阵的求逆
        :math:`T_{2} = A T_{1} A^H`     (1+N-1)×(N-1)/2次M×2矩阵与2×2矩阵的乘法
        \                               (1+N-1)×(N-1)/次M×2矩阵与2×M矩阵的乘法
        :math:`T_{3} = X X^H`           (1+N-1)×(N-1)/2次M×1矩阵与1×M矩阵的乘法
        :math:`T_{4} = T_{2} T_{3}`     (1+N-1)×(N-1)/2次M×M矩阵与M×M矩阵的乘法
        :math:`C = abs(tr(T_{4}))`      (1+N-1)×(N-1)/2次M×M矩阵的求迹
        \                               (1+N-1)×(N-1)/2次标量的求模
        ============================== =========================================

    \

*   当所有的变量都采用事先存储的方式获取时，求解上述代价函数所需的存储空间为：


    .. table::
        :align: left
        :widths: auto

        ============================== ==========================
        变量                            存储空间
        ============================== ==========================
        :math:`T_{0} = A^H A`           (1+N-1)×(N-1)/2个2×2矩阵
        :math:`T_{1} = {T_{0}}^{-1}`    (1+N-1)×(N-1)/2个2×2矩阵
        :math:`T_{2} = A T_{1} A^H`     (1+N-1)×(N-1)/2个M×M矩阵
        :math:`T_{3} = X X^H`           1个M×M矩阵
        :math:`T_{4} = T_{2} T_{3}`     (1+N-1)×(N-1)/2个M×M矩阵
        :math:`C = abs(tr(T_{4}))`      (1+N-1)×(N-1)/2个标量
        ============================== ==========================

    \

*   考虑到DML算法对速度更为敏感，针对上述代价函数较为合适的结合方式是：

    .. table::
        :align: left
        :widths: auto

        ============================== ========== =========================================
        变量                            获取方式   占用资源
        ============================== ========== =========================================
        :math:`T_{0} = A^H A`           事先存储   初始化时的一次性运算
        :math:`T_{1} = {T_{0}}^{-1}`    事先存储   初始化时的一次性运算
        :math:`T_{2} = A T_{1} A^H`     事先存储   初始化时的一次性运算
        \                               \          (1+N-1)×(N-1)/2个M×M矩阵的存储空间
        :math:`T_{3} = X X^H`           事先存储   1次M×1矩阵与1×M矩阵的乘法
        \                               \          1个M×M矩阵的存储空间
        :math:`T_{4} = T_{2} T_{3}`     实时运算   (1+N-1)×(N-1)/2次M×M矩阵与M×M矩阵的乘法
        :math:`C = abs(tr(T_{4}))`      实时运算   (1+N-1)×(N-1)/2次M×M矩阵的求迹
        \                               \          (1+N-1)×(N-1)/2次标量的求模
        ============================== ========== =========================================

    \

*   根据上述数据可知，这一代价函数有以下的弊病：

    *   大量的存储空间都与M和N同时呈平方关系
    *   大量的运算过程都与M和N同时呈平方关系

    尽管，由于上述矩阵的特殊性，这些资源有一定的减少空间。
    （例如，考虑到 :math:`T_{2}` 是正交投影矩阵，所以可以只存储其中的ceil(M×M/2)个元素。）
    但上述平方关系在这一形式下是难以化解的，因此，我们需要对该代价函数进行转化。

    \


............................
转化后的代价函数及其资源占用
............................

*   经过若干迭代，一种能够有效降低维数的形式为 :math:`abs((A^H X)^H (A^H A)^-1 (A^H X))` ，对应的资源占用是：

    .. table::
        :align: left
        :widths: auto

        ====================================== ========== =========================================
        变量                                    获取方式   占用资源
        ====================================== ========== =========================================
        :math:`T_{0} = A^H A`                   事先存储   初始化时的一次性运算
        :math:`T_{1} = {T_{0}}^{-1}`            事先存储   (1+N-1)×(N-1)/2个2×2矩阵的存储空间
        :math:`T_{2} = A^H X`                   事先存储   (1+N-1)×(N-1)/2个2×M矩阵和M×1矩阵的乘法
        \                                       \          2×1个标量的存储空间
        :math:`T_{3} = {T_{2}}^H T_{1} T_{2}`   实时运算   (1+N-1)×(N-1)/2次1×2矩阵与2×2矩阵的乘法
        \                                       \          (1+N-1)×(N-1)/2次2×2矩阵与2×1矩阵的乘法
        :math:`C = abs(T_{3})`                  实时运算   (1+N-1)×(N-1)/2次标量的求模
        ====================================== ========== =========================================

    根据上述数据可知，这一代价函数所需的存储空间和运算过程都只与N呈平方关系（，与M仅呈线性关系）。
    更重要的是，借助于相关矩阵的性质，剩余的平方关系还可以进一步退化。

    \

*   :math:`T_{1}` （ :math:`T_{0}` ）的退化：

    首先对 :math:`T_{1}` 进行展开：
    :math:`T_{1} = (A^H A)^{-1} = (\begin{bmatrix} a(\theta_0)^H \\ a(\theta_1)^H \end{bmatrix} \begin{bmatrix} a(\theta_0) & a(\theta_1) \end{bmatrix})^{-1}`
    ，其中，:math:`a(\theta)` 为 :math:`\theta` 对应的待测向量。

    **在不考虑天线加窗和补偿的情况下**，可将 :math:`a(\theta)` 不失一般性地表示为：
    :math:`a(\theta) = \frac{1}{\sqrt{M}} \sum_{i=1}^{M} e^{j·2\pi·d_i·sin(\theta)}`

    那么，:math:`T_{1}` 可以被进一步地展开为：
    :math:`T_{1} = ... = (\begin{bmatrix} 1 & \Delta \\ \Delta^H & 1 \end{bmatrix})^{-1}`
    ，其中，:math:`\Delta` 为 :math:`a(\theta_0)` 与 :math:`a(\theta_1)` 之间的点积。

    显然，:math:`\Delta` 可以被抽象成输入为 :math:`sin(\theta_0)-sin(\theta_1)` 的查找表：
    :math:`a(\theta_0)·a(\theta_1) = \frac{1}{\sqrt{M}} \sum_{i=1}^{M} e^{j·2\pi·d_i·(sin(\theta_0)-sin(\theta_1))} = LUT_\Delta(sin(\theta_0)-sin(\theta_1))`

    进一步地，:math:`T_{1}` 也就抽象成了另一个输入为 :math:`sin(\theta_0)-sin(\theta_1)` 的查找表：
    :math:`T_{1} = ... = (\begin{bmatrix} 1 & LUT_\Delta(sin(\theta_0)-sin(\theta_1)) \\ {LUT_\Delta(sin(\theta_0)-sin(\theta_1))}^H & 1 \end{bmatrix})^{-1} = LUT_{T_{1}}(sin(\theta_0)-sin(\theta_1))`

    这一抽象意义在于：
    :math:`T_{1}` 原本与 :math:`\theta_0` 和 :math:`\theta_1` 都相关，即输入是二维的；
    退化后，:math:`T_{1}` 只与 :math:`sin(\theta_0)-sin(\theta_1)` 相关，即输入是一维的。

    针对这一结果，我们可以选择两种不同地方式进行利用：

    #.  在 :math:`sin(\theta)` 上均匀采样，假设采样间隔为 :math:`\delta`，
        那么对于任意的待测角度 :math:`\theta_0` 和 :math:`\theta_1`，
        他们在 :math:`sin(\theta)` 上的间隔必然是 :math:`\delta` 的整数倍，且最小为0，最大为N-1。
        因此，:math:`T_{1}` 可以退化成一个深度为N-1的查找表。

        \

    #.  不在 :math:`sin(\theta)` 上均匀采样，那么，待测角度 :math:`\theta_0` 和 :math:`\theta_1` 在 :math:`sin(\theta)` 上的间隔并没有显著的特性，
        但是，我们仍可以将 :math:`T_{1}` 退化成一个查找表，并返回与当前 :math:`sin(\theta_0)-sin(\theta_1)` 的值最接近的入口所存储的 :math:`T_{1}` 。
        但对于其深度，一方面，该查找表的深度需要足够地大，从而保证返回的 :math:`T_{1}` 足够地准；
        另一方面，其深度又需要足够地小，从而保证对存储空间 (1+N-1)×(N-1)/2 的降维足够地有意义。

        \

    **在考虑天线加窗和补偿的情况下**，易得以下的结论：

    #.  加窗对上述退化过程没有任何影响。

        \

    #.  基于统一斜率和截距的补偿对上述退化过程没有任何影响。

            \

*   :math:`T_{2}` 的退化：

    首先对 :math:`T_{2}` 进行展开：
    :math:`T_{2} = A^H X = \begin{bmatrix} a(\theta_0)^H \\ a(\theta_1)^H \end{bmatrix} X = \begin{bmatrix} a(\theta_0)^H X \\ a(\theta_1)^H X \end{bmatrix}`

    显然，:math:`T_{2}` 可以被抽象成一个由某个输入为 :math:`\theta` 的查找表所组成的矩阵：
    :math:`T_{2} = \begin{bmatrix} LUT_{t_{2}}(\theta_0) \\ LUT_{t_{2}}(\theta_0) \end{bmatrix}`

*   :math:`C` ( 和 :math:`T_{3}` ） 的退化：

    首先对 :math:`C` 进行展开：
    :math:`C = abs(T_{3}) = abs({T_{2}}^H T_{1} T_{2})`，考虑到 :math:`C` 展开后每一个矩阵的大小都与M和N无关，且尺寸较小。
    因此，在实现上（，主要是对于硬件平台来说，）可以为其设计一个专用的引擎以加快运算的速度。

    \

*   退化后的资源占用情况如下：

    .. table::
        :align: left
        :widths: auto

        ====================================== ========== =======================================================
        变量                                    获取方式   占用资源
        ====================================== ========== =======================================================
        :math:`T_{0} = A^H A`                   事先存储   初始化时的一次性运算
        :math:`T_{1} = {T_{0}}^{-1}`            事先存储   N个2×2矩阵的存储空间
        \                                       \          考虑到其性质，只需要存储两个元素，且其中一个元素是实数
        :math:`T_{2} = A^H X`                   事先存储   N个1×M矩阵和M×1矩阵的乘法
        \                                       \          N个标量的存储空间
        :math:`C = abs({T_{2}}^H T_{1} T_{2})`  实时运算   (1+N-1)×(N-1)/2次1×2矩阵、2×2矩阵、2×1矩阵的连乘并求模
        ====================================== ========== =======================================================

    可见，退化后平方关系仅存在于 :math:`C` 与N之间。

    \

...................
上述转化的加速表现
...................

*   测试说明

    由于脚本语言的特殊性，上述转化在Matlab语言下并没有显著优势。
    因此，为了验证上述转化的效率，以下将给出的是基于C语言的测试情况。

    \

*   场景1

    对应的参数如下：

    ::

        NUMB_RND         = 1000;            % number of test rounds
        NUMB_SMP         = 1;               % number of samples
        DATA_DIS_ANT     = 0.5 * (0:3);     % data   of antenna's distances in lamda
        DATA_COE_WIN     = [1, 1, 1, 1];    % data   of window coefficient  in "1"
        DATA_SNR         = 20;              % data   of snr                 in dB
        DATA_POW_OBJ     = [0 0];           % data   of objects' powers     in dB
        DATA_DLT_ANG_TST = 1;               % data   of test angles' delta  in degree
        DATA_RNG_ANG_TST = 89;              % data   of test angles' range  in degree

    \

    .. table::
        :align: left
        :widths: auto

        ======== ========== =========== ========
         序号     rps（前）  rps（后）   加速比
        ======== ========== =========== ========
         0        86.4454    605.6935    7.0067
         1        84.7242    642.2608    7.5806
         2        82.3723    627.3526    7.6161
        ======== ========== =========== ========

    \


*   场景2

    对应的参数如下：

    ::

        NUMB_RND         = 1000;            % number of test rounds
        NUMB_SMP         = 1;               % number of samples
        DATA_DIS_ANT     = 0.5 * (0:7);     % data   of antenna's distances in lamda
        DATA_COE_WIN     = [1, 1, 1, 1];    % data   of window coefficient  in "1"
        DATA_SNR         = 20;              % data   of snr                 in dB
        DATA_POW_OBJ     = [0 0];           % data   of objects' powers     in dB
        DATA_DLT_ANG_TST = 1;               % data   of test angles' delta  in degree
        DATA_RNG_ANG_TST = 89;              % data   of test angles' range  in degree

    \

    .. table::
        :align: left
        :widths: auto

        ======== ========== =========== ==========
         序号     rps（前）  rps（后）   加速比
        ======== ========== =========== ==========
         0        15.0950    633.3122    104.6040
         1        14.9582    641.4368    104.2238
         2        14.8238    651.8905    103.4821
        ======== ========== =========== ==========

    \

*   场景3

    对应的参数如下：

    ::

        NUMB_RND         = 1000;            % number of test rounds
        NUMB_SMP         = 1;               % number of samples
        DATA_DIS_ANT     = 0.5 * (0:3);     % data   of antenna's distances in lamda
        DATA_COE_WIN     = [1, 1, 1, 1];    % data   of window coefficient  in "1"
        DATA_SNR         = 20;              % data   of snr                 in dB
        DATA_POW_OBJ     = [0 0];           % data   of objects' powers     in dB
        DATA_DLT_ANG_TST = 0.25;            % data   of test angles' delta  in degree
        DATA_RNG_ANG_TST = 89;              % data   of test angles' range  in degree

    \

    .. table::
        :align: left
        :widths: auto

        ======== ========== =========== ========
         序号     rps（前）  rps（后）   加速比
        ======== ========== =========== ========
         0        5.4277     36.7985     6.7797
         1        5.3757     36.4365     6.7781
         2        5.1697     37.1913     7.1941
        ======== ========== =========== ========


----------------------
优化搜索过程（待添加）
----------------------


-------------
减少系数存储
-------------

    具体内容已在 `转化后的代价函数及其资源占用`_ 中阐述，相比于DBF算法，为了实现可用的DML，额外需要的系数可以从：

    .. table::
        :align: left
        :widths: auto

        ============================ ===================================
        变量                          占用资源
        ============================ ===================================
        :math:`T_{2} = A T_{1} A^H`   (1+N-1)×(N-1)/2个M×M矩阵的存储空间
        :math:`T_{3} = X X^H`         1个M×M矩阵的存储空间
        ============================ ===================================


    减少为：

    .. table::
        :align: left
        :widths: auto

        ============================= =======================================================
        变量                           占用资源
        ============================= =======================================================
        :math:`T_{1} = {T_{0}}^{-1}`   N个2×2矩阵的存储空间
        \                              考虑到其性质，只需要存储两个元素，且其中一个元素是实数
        :math:`T_{2} = A^H X`          N个标量的存储空间
        ============================= =======================================================

    \


----------------------
判断物体数目（待添加）
----------------------
